import copy
import random
# show edge cost


class Graph:
    # The graph is represented internally as 3 dictionaries:
    # For each vertex we store all outbound vertices connected to it
    # For each vertex we store all inbound vertices connected to it
    # For each edge we store the cost
    def __init__(self, nr_vertices=0):# nrv=number vertices
        self.edge_number = 0
        self.vertex_number = 0
        self.in_vertices = {}
        self.out_vertices = {}
        self.price = {}# this is the cost
        for vertex in range(nr_vertices):
            self.add_vertex(vertex)

    # Function to add an edge:
    # Input: Vertices to add an edge to; The cost of the edge
    # Output: -
    # Effect: Adds an edge
    # Exceptions: If one of the vertices doesn't exist
    def add_edge(self, x, y, cost):
        # self.out_vertices[vertex] <- iti spune care sunt nodurile conectate cu nodul "vertex" (outbound)
        if not x in self.out_vertices or not y in self.in_vertices:
            raise Exception("Error Occured: The Vertices do not exist:")
        if not y in self.out_vertices[x]:
            self.out_vertices[x].append(y)
        if not x in self.in_vertices[y]:
            self.in_vertices[y].append(x)
        if not y in self.price[x]:
            self.price[x][y] = cost
        self.edge_number += 1

    # Function to remove an edge:
    # Input: Vertices from which to remove the edge
    # Output: -
    # Effect: Removes an edge
    # Exceptions: If one of the vertices doesn't exist, or there doesn't exist an edge between them
    def delete_edge(self, x, y):
        if not (x in self.out_vertices and y in self.in_vertices and y in self.out_vertices[x] and x in self.in_vertices[y]):
            raise Exception("Error Occured: One of the vertices does not exist or the vertices are not connected!")
        self.out_vertices[x].remove(y)
        self.in_vertices[y].remove(x)
        del self.price[x][y]# the dict_key_remover 
        self.edge_number -= 1

    # Function to check if an edge exists
    # Input: Vertices from which the edge is connected
    # Output: Boolean whether the edge exists
    # Effect: -
    # Exceptions: -
    def valid_edge(self, x, y):
        if x in self.out_vertices and y in self.in_vertices and y in self.out_vertices[x] and x in self.in_vertices[y]:
            return True
        return False

    # Function to add a vertex
    # Input: the vertex
    # Output: -
    # Effect: Adds a vertex
    # Exceptions: If the vertex already exists
    def add_vertex(self, vertex):
        if vertex in self.out_vertices or vertex in self.in_vertices:
            raise Exception("Error Occured: Vertex exists!")
        self.out_vertices[vertex] = []
        self.in_vertices[vertex] = []# the simple vertex(izolat)
        self.price[vertex] = {}
        self.vertex_number += 1

    # Function to add a vertex
    # Input: the vertex
    # Output: -
    # Effect: - Removes a vertex and all edges that are dependent on it
    # Exceptions: If the vertex doesn't exist
    def delete_vertex(self, vertex):
        if vertex not in self.out_vertices or vertex not in self.in_vertices:
            raise Exception("Error Occured: Vertex doesn't exist!")
        for out_link in self.out_vertices[vertex]:
            self.delete_edge(vertex, out_link) #simpler(deletes the connection)

        for in_link in self.in_vertices[vertex]:
            self.delete_edge(in_link,vertex)
        del self.out_vertices[vertex]
        del self.in_vertices[vertex]
        del self.price[vertex]
        self.vertex_number -= 1

    # Function to get the indegree
    # Input: Targeted vertex
    # Output: Number of vertices that are inbound of the target vertex
    # Effect: -
    # Exceptions: If the vertex doesn't exist
    def get_in_degree(self, vertex):
        if not vertex in self.in_vertices:
            raise Exception("Error Occured: The vertex doesn't exist!")
        return len(self.in_vertices[vertex])

    # Function to get the outdegree
    # Input: Targeted vertex
    # Output: Number of vertices that are outbound of the target vertex
    # Effect: -
    # Exceptions: If the vertex doesn't exist
    def get_out_degree(self, vertex):
        if not vertex in self.out_vertices:
            raise Exception("Error Occured: The vertex doesn't exist!")
        return len(self.out_vertices[vertex])

    # Function to get the vertices
    # Input: -
    # Output: Iterable list containing all vertices
    # Effect: -
    # Exceptions: -
    def get_vertices(self):
        list_keys=[]
        for i in self.in_vertices.keys():
            list_keys.append(i)
        return list_keys

    # Function to get the outbound vertices
    # Input: target vertex
    # Output: Iterable list containing all vertices outbound of the target vertex
    # Effect: -
    # Exceptions: If the vertex doesn't exist
    def get_out_vertices(self, vertex):
        if not vertex in self.out_vertices:
            raise Exception("Error Occured: The vertex doesn't exist!")
        return self.out_vertices[vertex][:]

    # Function to get the inbound vertices
    # Input: target vertex
    # Output: Iterable list containing all vertices inbound of the target vertex
    # Effect: -
    # Exceptions: If the vertex doesn't exist
    def get_in_vertices(self, vertex):
        if not vertex in self.in_vertices:
            raise Exception("Error Occured: The vertex doesn't exist!")
        return self.in_vertices[vertex][:]

    # Function to change the cost associtated to an edge
    # Input: the vertices which form the edge; the new cost
    # Output: -
    # Effect: Changes the cost associated with the edge formed by the input vertices
    # Exceptions: If the vertices don't exist or aren't connected together
    def price_change(self, x, y, new_price):
        if not (x in self.out_vertices and y in self.in_vertices and y in self.out_vertices[x]):
            raise Exception("Error Occured: The vertices don't exist or aren't connected together!")
        self.price[x][y] = new_price

def read_graph_from_file():
    name_of_the_file = input("Filename: ")
    file_open = open(name_of_the_file, "r")
    line_read_from_file = file_open.readline()
    line_read_from_file= line_read_from_file.split()
    vertex_number = int(line_read_from_file[0])
    edge_number = int(line_read_from_file[1])
    new_graph = Graph(vertex_number)
    line_read_from_file = file_open.readline()
    while len(line_read_from_file) > 0:
        line_read_from_file = line_read_from_file.split()
        x = int(line_read_from_file[0])
        y = int(line_read_from_file[1])
        price = int(line_read_from_file[2])
        new_graph.add_edge(x, y, price)
        line_read_from_file = file_open.readline()
    file_open.close()
    return new_graph

def display_number_of_vertices(my_graph):
    print("The graph has " + str(my_graph.vertex_number) + " vertices")

def valid_edge(my_graph):
    x = int(input("x = "))
    y = int(input("y = "))
    if my_graph.valid_edge(x, y) == True:
        print("There exists the ({0}, {1}) edge".format(x, y))
    else:
        print("Error Occured:There doesn't exist an edge from {0} to {1} ".format(x, y))

def get_in_degree(my_graph):
    vertex =int(input("Vertex: "))
    print("The vertex {0} has an indegree of {1}".format(vertex,my_graph.get_in_degree(vertex)))

def get_out_degree(my_graph):
    vertex = int(input("Vertex: "))
    print("The vertex {0} has an outdegree of {1}".format(vertex,my_graph.get_out_degree(vertex)))

def get_vertices(my_graph):
    vertices = my_graph.get_vertices()
    print_str = ""
    for vertex in vertices:
        print_str += "{0} ".format(vertex)
    print(print_str)

def vertices_out(my_graph):
    vertex = int(input("Vertex: "))
    print_str = ""
    vertices = my_graph.get_out_vertices(vertex)
    for vertex in vertices:
        print_str += "{0} ".format(vertex)
    print(print_str)

def vertices_in(my_graph):
    vertex = int(input("Vertex: "))
    print_str= ""
    vertices = my_graph.get_in_vertices(vertex)
    for vertex in vertices:
        print_str += "{0} ".format(vertex)
    print(print_str)

def price_change(my_graph):
    x = int(input("x = "))
    y = int(input("y = "))
    price = int(input("New price is = "))
    my_graph.price_change(x, y, price)

def add_edge(my_graph):
    x = int(input("x = "))
    y = int(input("y = "))
    price = int(input("New price is = "))
    my_graph.add_edge(x, y, price)

def add_vertex(my_graph):
    vertex = int(input("vertex: "))
    my_graph.add_vertex(vertex)

def delete_vertex(my_graph):
    vertex = int(input("vertex: "))
    my_graph.delete_vertex(vertex)

def delete_edge(my_graph):
    x = int(input("x = "))
    y = int(input("y = "))
    my_graph.delete_edge(x, y)


def file_graph_saver(my_graph):
    name_of_the_file = input("Filename: ")
    file_open = open(name_of_the_file, "w")
    file_open.write("{0} {1}\n".format(my_graph.vertex_number, my_graph.edge_number))
    for x in my_graph.price.keys():
        for y in my_graph.price[x].keys():
            file_open.write("{0} {1} {2}\n".format(x, y, my_graph.price[x][y]))
    file_open.close()

def copy_graph(new_graph, my_graph):
    new_graph.vertex_number = my_graph.vertex_number
    new_graph.edge_number = my_graph.edge_number
    new_graph.in_vertices = copy.deepcopy(my_graph.in_vertices)
    new_graph.out_vertices = copy.deepcopy(my_graph.out_vertices)
    new_graph.price = copy.deepcopy(my_graph.price)

def produce_graph_random():
    vertex_number = int(input("Vertex count: "))
    edge_number = int(input("Edge count: "))
    random_graph = Graph(vertex_number)
    while edge_number != 0:
        x = random.randint(0, vertex_number - 1)
        y = random.randint(0, vertex_number - 1)
        if random_graph.valid_edge(x, y) == False:
            random_graph.add_edge(x, y, random.randint(-100, 100))
            edge_number -= 1
    return random_graph


def display_menu():
    print("\n== Main Menu ==\n")
    print("1. Read graph from file")
    print("2. Print the number of vertices")
    print("3. Check edge")
    print("4. Indegree of vertex")
    print("5. Outdegree of vertex")
    print("6. Print all vertices")
    print("7. Print all vertices outbound of a given vertex")
    print("8. Print all vertices inbound of a given vertex")
    print("9. Change cost of edge")
    print("10. Add a vertex")
    print("11. Add an edge")
    print("12. Copy graph")
    print("13. Save graph to file")
    print("14. Create a random graph")
    print("15. Delete a vertex")
    print("16. Delete an edge")
    print("0. Exit")


def start_function():
    new_graph = Graph()
    while True:
        display_menu()
        input_user = input("Enter a number: ")
        try:
            if input_user == "1":
                new_graph = read_graph_from_file()
            elif input_user == "2":
                display_number_of_vertices(new_graph)
            elif input_user == "3":
                valid_edge(new_graph)
            elif input_user == "4":
                get_in_degree(new_graph)
            elif input_user == "5":
                get_out_degree(new_graph)
            elif input_user == "6":
                get_vertices(new_graph)
            elif input_user == "7":
                vertices_out(new_graph)
            elif input_user == "8":
                vertices_in(new_graph)
            elif input_user == "9":
                price_change(new_graph)
            elif input_user == "10":
                add_edge(new_graph)
            elif input_user == "11":
                add_vertex(new_graph)
            elif input_user == "12":
                CopyG = Graph()
                copy_graph(CopyG, new_graph)
            elif input_user == "13":
                file_graph_saver(new_graph)
            elif input_user == "14":
                new_graph = produce_graph_random()
            elif input_user == "15":
                delete_vertex(new_graph)
            elif input_user == "16":
                delete_edge(new_graph)
            elif input_user == "0":
                break
        except Exception as ex:
            print(ex)

start_function()
