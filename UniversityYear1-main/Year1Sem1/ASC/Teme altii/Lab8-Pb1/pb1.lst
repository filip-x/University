     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  extern printf                         
    11                                  import printf msvcrt.dll
    12                                  
    13                                  extern scanf
    14                                  import scanf msvcrt.dll
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18                                      ; ...
    19                                      
    20                                      ;Read two numbers a and b (in base 10) from the keyboard and calculate their product. This value will be stored in a variable called "result" (defined in the data segment).
    21                                      
    22 00000000 00000000                    a dd 0;
    23 00000004 00000000                    b dd 0;
    24 00000008 613D2000                    msg_a db "a= ",0
    25 0000000C 623D2000                    msg_b db "b= ",0
    26                                      
    27 00000010 2564000000000000            format_a dd "%d",0
    28 00000018 2564000000000000            format_b dd "%d",0
    29                                      
    30 00000020 FFFFFFFF                    _ dd -1
    31                                      
    32 00000024 0000000000000000            result dq 0;
    33                                      
    34                                      
    35                                  ; our code starts here
    36                                  segment code use32 class=code
    37                                      start:
    38                                          ; ...
    39 00000000 68[08000000]                    push dword msg_a;
    40 00000005 FF15[00000000]                  call [printf];
    41 0000000B 83C404                          add esp,4*1;
    42                                          
    43 0000000E 68[00000000]                    push dword a;
    44 00000013 68[10000000]                    push dword format_a;
    45 00000018 FF15[00000000]                  call [scanf]
    46 0000001E 83C408                          add esp,4*2;
    47                                          
    48                                          
    49 00000021 68[0C000000]                    push dword msg_b;
    50 00000026 FF15[00000000]                  call [printf];
    51 0000002C 83C404                          add esp,4*1;
    52                                          
    53 0000002F 68[04000000]                    push dword b;
    54 00000034 68[18000000]                    push dword format_b;
    55 00000039 FF15[00000000]                  call [scanf]
    56 0000003F 83C408                          add esp,4*2;
    57                                      
    58 00000042 A1[00000000]                    mov eax,[a];
    59 00000047 8B1D[04000000]                  mov ebx,[b];
    60                                           
    61 0000004D F7EB                            imul ebx;
    62 0000004F A3[24000000]                    mov [result],eax;
    63                                          
    64 00000054 8915[28000000]                  mov [result+4],edx;
    65                                          
    66                                          
    67                                      
    68                                          ; exit(0)
    69 0000005A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    70 0000005C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
