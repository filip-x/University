     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                              ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  extern printf
    11                                  import printf msvcrt.dll
    12                                  extern scanf
    13                                  import scanf msvcrt.dll
    14                                                            
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18                                      ; ...
    19                                  ;Read numbers (in base 10) in a loop until the digit '0' is read from the keyboard. Determine and display the smallest number from those that have been read.
    20                                  
    21 00000000 00                          nr db 0; ; i only use byte bcs of the memory, so we can wee better in the memory
    22                                      
    23 00000001 4E723D2000                  screenMsg_nr db "Nr= ",0;
    24                                      
    25 00000006 256400                      format_nr db "%d",0;
    26                                      
    27 00000009 FFFFFFFF                    _ dd -1;
    28 0000000D 00                          rez db 0;
    29                                  ; our code starts here
    30                                  segment code use32 class=code
    31                                      start:
    32                                          ; ...
    33 00000000 B800000000                      mov eax,0;
    34 00000005 BB00000000                      mov ebx,0;
    35 0000000A B37F                            mov bl,127;
    36                                          
    37                                          for:; for inf loop
    38                                          
    39                                          
    40 0000000C 68[01000000]                    push dword screenMsg_nr;
    41 00000011 FF15[00000000]                  call [printf];
    42 00000017 83C404                          add esp,4*1;
    43                                         
    44 0000001A 68[00000000]                    push dword nr;
    45 0000001F 68[06000000]                    push dword format_nr;
    46 00000024 FF15[00000000]                  call [scanf];
    47 0000002A 83C408                          add esp,4*2;
    48                                  
    49                                          
    50 0000002D A0[00000000]                    mov al,[nr];
    51                                          
    52 00000032 3C00                            cmp al,0 ; if it's 0 go to final 
    53 00000034 740A                            je final
    54                                          
    55                                         
    56 00000036 38D8                            cmp al,bl;
    57 00000038 7C02                            jl schimbare
    58                                   
    59 0000003A EBD0                            jmp for
    60                                          
    61                                          schimbare:
    62 0000003C 88C3                            mov bl,al;
    63 0000003E EBCC                            jmp for
    64                                          
    65                                          final:
    66 00000040 881D[0D000000]                  mov [rez],bl;
    67                                          
    68                                          ;extra 
    69 00000046 FF35[0D000000]                  push dword [rez]
    70 0000004C 68[06000000]                    push dword format_nr
    71 00000051 FF15[00000000]                  call [printf]
    72 00000057 83C408                          add esp,4*2;
    73                                   
    74                                          ; exit(0)
    75 0000005A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    76 0000005C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
