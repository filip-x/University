     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      
    15                                      ;1 and 30- problems simple exercises & problems add and subs byte
    16 00000000 01                          a db 1
    17 00000001 09                          b db 9
    18 00000002 0B                          c db 11
    19 00000003 05                          d db 5
    20                                      ;1.)c-(a+d)+(b+d)
    21                                      ;11-6+14= 5+14=19
    22                                      ;30.)d-(a+b)-(c+c)
    23                                      ;5-10-22=-5-22=-27
    24                                      
    25 00000004 0401                        a_a dw 260
    26 00000006 6201                        b_b dw 354
    27 00000008 5802                        c_c dw 600
    28 0000000A C801                        d_d dw 456
    29                                      
    30                                      ;1.) (c+b+a)-(d+d) = 302
    31                                      ;30.) a-b+(c-d+a) = 310
    32                                      
    33                                      
    34                                      
    35                                      
    36                                  
    37                                  ; our code starts here
    38                                  segment code use32 class=code
    39                                      start:
    40                                          ; ...
    41 00000000 B800000000                      mov eax,0;
    42 00000005 A0[00000000]                    mov al,[a];
    43 0000000A 0205[01000000]                  add al,[b];
    44                                          ; we have 1 + 9 = A, I insert the values in al, bcs both of them can be represented om 1 byte(8-bits).
    45 00000010 BB00000000                      mov ebx,0;
    46 00000015 8A1D[02000000]                  mov bl,[c];
    47 0000001B 021D[03000000]                  add bl,[d];
    48                                          ; we have 11 + 5  = 10, I insert the values in bl, bcs both of them can be represented on 1byte (8-bits)
    49                                          ;11=B => B+5= 16 => 10
    50 00000021 B800000000                      mov eax,0;
    51 00000026 BB00000000                      mov ebx,0;
    52 0000002B B900000000                      mov ecx,0;
    53                                          
    54 00000030 A0[00000000]                    mov al,[a];
    55 00000035 0205[03000000]                  add al,[d];
    56 0000003B 8A1D[01000000]                  mov bl,[b];
    57 00000041 021D[03000000]                  add bl,[d];
    58 00000047 8A0D[02000000]                  mov cl,[c];
    59 0000004D 28C1                            sub cl,al;
    60 0000004F 00D9                            add cl,bl;
    61                                          
    62 00000051 B800000000                      mov eax,0;
    63 00000056 BB00000000                      mov ebx,0;
    64 0000005B B900000000                      mov ecx,0;
    65                                          
    66 00000060 A0[03000000]                   mov al,[d];
    67 00000065 8A1D[00000000]                 mov bl,[a];
    68 0000006B 021D[01000000]                 add bl,[b];
    69 00000071 8A0D[02000000]                 mov cl,[c];
    70 00000077 020D[02000000]                 add cl,[c];
    71 0000007D 28D8                           sub al,bl;
    72 0000007F 28C8                           sub al,cl;
    73                                         
    74 00000081 B800000000                      mov eax,0;
    75 00000086 BB00000000                      mov ebx,0;
    76 0000008B B900000000                      mov ecx,0;
    77                                          
    78 00000090 66A1[08000000]                  mov ax,[c_c];
    79 00000096 660305[06000000]                add ax,[b_b];
    80 0000009D 660305[04000000]                add ax,[a_a];
    81 000000A4 668B1D[0A000000]                mov bx,[d_d];
    82 000000AB 66031D[0A000000]                add bx,[d_d];
    83 000000B2 6629D8                          sub ax,bx;
    84                                          
    85 000000B5 B800000000                      mov eax,0;
    86 000000BA BB00000000                      mov ebx,0;
    87                                         
    88 000000BF 66A1[04000000]                 mov ax,[a_a];
    89 000000C5 662B05[06000000]               sub ax,[b_b];
    90 000000CC 668B1D[08000000]               mov bx,[c_c];
    91 000000D3 662B1D[0A000000]               sub bx,[d_d];
    92 000000DA 66031D[04000000]               add bx,[a_a];
    93 000000E1 6601D8                         add ax,bx;
    94                                          
    95                                          
    96                                          
    97                                          
    98                                          
    99                                          
   100                                  
   101                                  
   102                                      
   103                                          ; exit(0)
   104 000000E4 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   105 000000E6 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
