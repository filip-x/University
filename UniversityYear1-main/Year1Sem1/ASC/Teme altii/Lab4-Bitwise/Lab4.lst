     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  
     7                                  ; declare external functions needed by our program
     8                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     9                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; ...
    15                                      
    16 00000000 AF8F                        a dw 1000_1111_1010_1111b;memorie AF 8F
    17 00000002 F4A8                        b dw 1010_1000_1111_0100b;memorie F4 A8
    18 00000004 00000000                    c dd 0;memorie A0 EB AF 8F
    19                                      
    20                                  
    21                                      
    22                                      ;3Given the words A and B, compute the doubleword C as follows:
    23                                      ;the bits 0-2 of C are the same as the bits 12-14 of A
    24                                      ;the bits 3-8 of C are the same as the bits 0-5 of B
    25                                      ;the bits 9-15 of C are the same as the bits 3-9 of A
    26                                      ;the bits 16-31 of C are the same as the bits of A
    27                                      
    28                                      
    29                                      ;32Given the words A, B si C, obtain the byte D as the sum of the integers represented by:
    30                                      ;the bits 0-4 of A
    31                                      ;the bits 5-9 of B
    32                                      ;The byte E is the integer represented by the bits 10-14 of C. Obtain the byte F by computing the subtraction D-E.
    33                                      
    34 00000008 AF8F                        a_a dw 1000_1111_1010_1111b;memorie AF 8F
    35 0000000A F4A8                        b_b dw 1010_1000_1111_0100b;memorie F4 A8
    36 0000000C 2DE5                        c_c dw 1110_0101_0010_1101b;memorie 2d E5
    37 0000000E 00                          d_d db 0;16
    38 0000000F 00                          e_e db 0;19
    39 00000010 00                          f_f db 0;FD
    40                                      
    41                                  ; our code starts here
    42                                  segment code use32 class=code
    43                                      start:
    44                                          ; ...
    45                                          ;3
    46 00000000 B800000000                      mov eax,0;
    47 00000005 66A1[00000000]                  mov ax,[a];
    48 0000000B 66C1E80C                        shr ax,12;
    49 0000000F 6683E007                        and ax,0111b;
    50 00000013 A3[04000000]                    mov dword[c], eax;
    51                                          ;the bits 0-2 of C are the same as the bits 12-14 of A
    52                                          
    53 00000018 B800000000                      mov eax,0;
    54 0000001D 66A1[02000000]                  mov ax,[b];
    55 00000023 6683E03F                        and ax,0x3F;
    56 00000027 66C1E003                        shl ax,3;
    57 0000002B 0905[04000000]                  or dword[c],eax;
    58                                          ;the bits 3-8 of C are the same as the bits 0-5 of B
    59                                          
    60 00000031 B800000000                      mov eax,0;
    61 00000036 66A1[00000000]                  mov ax,[a];
    62 0000003C 66C1E803                        shr ax,3;
    63 00000040 6683E07F                        and ax,0x7F;
    64 00000044 66C1E009                        shl ax,9;
    65 00000048 0905[04000000]                  or dword[c],eax;
    66                                           ;the bits 9-15 of C are the same as the bits 3-9 of A
    67                                           
    68 0000004E B800000000                      mov eax,0;
    69 00000053 66A1[00000000]                  mov ax,[a];
    70 00000059 C1E010                          shl eax,16;
    71 0000005C 0905[04000000]                  or dword[c],eax;
    72                                          
    73                                          ;==============================================================
    74                                          ;32
    75 00000062 B800000000                      mov eax,0;
    76 00000067 66A1[08000000]                  mov ax,[a_a];
    77 0000006D 6683E00F                        and ax,0xF;
    78                                          ;the bits 0-4 of A
    79 00000071 BB00000000                      mov ebx,0;
    80 00000076 668B1D[0A000000]                mov bx,[b_b];
    81 0000007D 66C1EB05                        shr bx,5;
    82 00000081 6683E31F                        and bx,0x1F;
    83                                          ;the bits 5-9 of B 
    84                                          ;F+7==16
    85 00000085 00D8                            add al,bl;
    86 00000087 A2[0E000000]                    mov byte[d_d],al;
    87                                          
    88                                          
    89                                          
    90                                          
    91 0000008C B800000000                      mov eax,0;
    92 00000091 66A1[0C000000]                  mov ax,[c_c];
    93 00000097 66C1E80A                        shr ax,10;
    94 0000009B 6683E01F                        and ax,0x1F;
    95 0000009F A2[0F000000]                    mov byte[e_e],al;
    96                                          ;The byte E is the integer represented by the bits 10-14 of C.== 19
    97                                          
    98 000000A4 B800000000                      mov eax,0;
    99 000000A9 A0[0E000000]                    mov al,[d_d];
   100 000000AE 2A05[0F000000]                  sub al,[e_e];
   101 000000B4 A2[10000000]                    mov byte[f_f],al;
   102                                          ;Obtain the byte F by computing the subtraction D-E.==== 16-19 = FD
   103                                          
   104                                          
   105                                          
   106                                          
   107                                          
   108                                          
   109                                          
   110                                          
   111                                          
   112                                      
   113                                          ; exit(0)
   114 000000B9 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   115 000000BB FF15[00000000]                  call    [exit]       ; call exit to terminate the program
