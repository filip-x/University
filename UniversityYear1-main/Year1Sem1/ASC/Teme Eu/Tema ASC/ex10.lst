     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 221133224433554466-         A dw 1122h, 2233h, 3344h, 4455h, 5566h, 6677h
    14 00000009 557766             
    15                                      len equ ($-A)/2
    16 0000000C 00<rept>                    B1 times len db 0 ; 11 22 33 44 55 66
    17 00000012 00<rept>                    B2 times len db 0 ; 22 33 44 55 66 77
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23                                          ; Given an array A of words, build two arrays of bytes:  
    24                                          ; - array B1 contains as elements the higher part of the words from A
    25                                          ; - array B2 contains as elements the lower part of the words from A
    26 00000000 BE[00000000]                    mov ESI, A
    27 00000005 B906000000                      mov ECX, len
    28 0000000A 68[12000000]                    push B2
    29 0000000F 68[0C000000]                    push B1
    30                                          for1:
    31 00000014 66AD                                lodsw
    32 00000016 5F                                  pop EDI ; POP B1
    33 00000017 8827                                mov [EDI], AH ; Move higher part of the word to B1
    34 00000019 89FB                                mov EBX, EDI ; PUT B1 IN EBX
    35 0000001B 5F                                  pop EDI ; POP B2
    36 0000001C 8807                                mov [EDI], AL ; Move lower part of the word to B2
    37 0000001E 47                                  inc EDI ; Moving to the next element of B2
    38 0000001F 43                                  inc EBX ; Moving to the next element of B1
    39 00000020 57                                  push EDI ; PUSH B2
    40 00000021 53                                  push EBX ; PUSH B1
    41 00000022 E2F0                                loop for1 ; REPEAT LEN TIMES (ECX = ECX - 1 after every iteration)
    42                                              
    43                                          
    44                                          
    45                                      
    46                                          ; exit(0)
    47 00000024 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    48 00000026 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
