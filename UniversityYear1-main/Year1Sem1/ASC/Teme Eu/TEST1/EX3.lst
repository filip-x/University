     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ; a - doubleword; b, d - byte; c - word; e - qword
    15                                      ; a + b / c - d * 2 - e =1+10/3-4*2-5=1+3-8-5=-9
    16 00000000 01000000                    a dd 1 
    17 00000004 0A                          b db 10 
    18 00000005 0300                        c dw 3 
    19 00000007 04                          d db 4 
    20 00000008 0500000000000000            e dq 5 
    21 00000010 02                          f db 2 
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; ...
    26 00000000 A0[04000000]                    mov al, byte[b]
    27 00000005 6698                            cbw
    28 00000007 6699                            cwd
    29 00000009 66F73D[05000000]                idiv word[c]
    30 00000010 6A00                            push 0
    31 00000012 6650                            push ax 
    32 00000014 BA00000000                      mov edx,0
    33 00000019 58                              pop eax
    34 0000001A 0305[00000000]                  add eax,dword[a]
    35 00000020 89C3                            mov ebx,eax ;prima jumatate este salvata in ebx 
    36 00000022 A0[07000000]                    mov al,byte[d]
    37 00000027 6698                            cbw
    38 00000029 F62D[10000000]                  imul byte[f]
    39 0000002F 98                              cwde
    40 00000030 89C1                            mov ecx,eax; prima spatele a qword
    41 00000032 89D8                            mov eax,ebx ; in eax avem acum pe ebx si il facem q word
    42 00000034 29C8                            sub eax,ecx
    43 00000036 99                              cdq
    44 00000037 2B05[08000000]                  sub eax,dword[e]
    45 0000003D 1B15[0C000000]                  sbb edx,dword[e+4]
    46                                          
    47                                          
    48                                          
    49                                          
    50                                          
    51                                          
    52                                          
    53                                          
    54                                          
    55                                      
    56                                          ; exit(0)
    57 00000043 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    58 00000045 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
