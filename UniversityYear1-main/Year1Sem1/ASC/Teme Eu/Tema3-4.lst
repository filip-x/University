     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;(a*a+b+x)/(b+b)+c*c; a-word; b-byte; c-doubleword; x-qword signed
    15 00000000 0500                        a dw 5 
    16 00000002 FE                          b db -2 
    17 00000003 03000000                    c dd 3
    18 00000007 0400000000000000            x dq 4 
    19 0000000F 0000                        bb dw 0
    20                                      
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25 00000000 66BA0000                        mov dx, 0
    26 00000004 66A1[00000000]                  mov ax,[a] 
    27 0000000A 66F72D[00000000]                imul word[a] ;we multiply a by a (signed)
    28 00000011 6689C1                          mov cx,ax ;
    29 00000014 A0[02000000]                    mov al,[b]
    30 00000019 6698                            cbw 
    31 0000001B 6689C3                          mov bx,ax
    32 0000001E 6689C8                          mov ax,cx
    33 00000021 6601D8                          add ax,bx
    34 00000024 6683D200                        adc dx,0
    35 00000028 6652                            push dx 
    36 0000002A 6650                            push ax 
    37 0000002C 58                              pop eax 
    38 0000002D 99                              cdq
    39 0000002E 8B0D[07000000]                  mov ecx,[x]
    40 00000034 8B1D[0B000000]                  mov ebx,[x+4]
    41 0000003A 01C8                            add eax,ecx
    42 0000003C 11DA                            adc edx,ebx
    43 0000003E BB00000000                      mov ebx,0; este doar vizual
    44 00000043 B900000000                      mov ecx,0; este doar vizual
    45 00000048 89C3                            mov ebx,eax
    46 0000004A 89D1                            mov ecx,edx
    47 0000004C A0[02000000]                    mov al,[b]
    48 00000051 6698                            cbw
    49 00000053 6601C0                          add ax,ax 
    50 00000056 98                              cwde
    51 00000057 50                              push eax 
    52 00000058 A1[03000000]                    mov eax,[c]
    53 0000005D F7E8                            imul eax
    54 0000005F 668F05[0F000000]                pop word[bb]; adica b+b
    55 00000066 50                              push eax
    56 00000067 52                              push edx
    57 00000068 66A1[0F000000]                  mov ax,word[bb]
    58 0000006E 98                              cwde
    59 0000006F 89CA                            mov edx,ecx
    60 00000071 89C1                            mov ecx,eax 
    61 00000073 89D8                            mov eax,ebx
    62 00000075 F7F9                            idiv ecx ; aici imi da gresit 
    63 00000077 5B                              pop ebx
    64 00000078 59                              pop ecx 
    65 00000079 99                              cdq 
    66 0000007A 01C8                            add eax,ecx
    67 0000007C 11DA                            adc edx,ebx
    68                                          
    69                                          
    70                                          
    71                                          
    72                                          
    73                                          
    74                                          
    75                                          
    76                                          
    77                                          
    78                                         
    79                                          
    80                                          
    81                                          
    82                                          
    83                                          
    84                                          
    85                                          
    86                                          
    87                                      
    88                                          ; exit(0)
    89 0000007E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    90 00000080 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
