     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,printf,scanf              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process.isdefined in msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  import scanf msvcrt.dll
    11                                  
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17                                      ;Read a number in base 10 from the keyboard and display the value of that number in base 16 Example: Read: 28; display: 1C
    18 00000000 0000                        a dw 0
    19 00000002 0000                        b dw 0
    20 00000004 613D00                      message db "a=", 0
    21 00000007 256400                      format1 db "%d", 0
    22 0000000A 257800                      format2 db "%x",0
    23                                      
    24                                      
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28                                          ; ...
    29 00000000 68[04000000]                    push dword message 
    30 00000005 FF15[00000000]                  call [printf]
    31 0000000B 83C404                          add esp, 4*1
    32                                          
    33 0000000E 68[00000000]                    push dword a 
    34 00000013 68[07000000]                    push dword format1 
    35 00000018 FF15[00000000]                  call [scanf]
    36 0000001E 83C408                          add esp,4*2
    37 00000021 FF35[00000000]                  push dword [a] 
    38 00000027 68[0A000000]                    push dword format2
    39 0000002C FF15[00000000]                  call [printf]
    40 00000032 83C408                          add esp,4*2
    41                                          
