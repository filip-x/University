     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;d-(7-a*b+c)/a-6+x/2; a,c-byte; b-word; d-doubleword; x-qword
    15                                      ; 15-(7-1*6+2)/1-6+12/2= 15-3-6+6= 13 = C
    16 00000000 01                          a db 1
    17 00000001 02                          c db 2
    18 00000002 0600                        b dw 6
    19 00000004 0F000000                    d dd 15  
    20 00000008 0C00000000000000            x dq 12 
    21 00000010 07                          z db 7 ;variables
    22 00000011 06                          y db 6 ;variables
    23 00000012 02                          w db 2 ;variables
    24                                      
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28                                          ; ...
    29 00000000 66B80000                        mov ax, 0
    30 00000004 A0[00000000]                    mov al,[a] ; we move a in ax  so that we can do the multiplication 
    31 00000009 668B15[02000000]                mov dx ,[b] ; we move b in dx so that we can do the multiplication in word ( it must be in dx and the end result it will be in ax 
    32 00000010 66F7E2                          mul dx 
    33 00000013 66B90000                        mov cx,0
    34 00000017 8A0D[10000000]                  mov cl,[z]
    35 0000001D 6629C1                          sub cx,ax
    36 00000020 66B80000                        mov ax,0
    37 00000024 A0[01000000]                    mov al,[c]
    38 00000029 6601C1                          add cx,ax
    39 0000002C B800000000                      mov eax,0
    40 00000031 6689C8                          mov ax,cx
    41 00000034 66B90000                        mov cx,0
    42 00000038 8A0D[00000000]                  mov cl,[a]
    43 0000003E 66F7F1                          div cx  ; in ax se salveaza valoare,iar in dx se alfa ce lcu care se imparte 
    44 00000041 BA00000000                      mov edx,0
    45 00000046 8B15[04000000]                  mov edx,[d]
    46 0000004C 29C2                            sub edx,eax
    47 0000004E B800000000                      mov eax,0
    48 00000053 A0[11000000]                    mov al,[y]
    49 00000058 29C2                            sub edx,eax ; totul este salcvat in edx 
    50 0000005A B900000000                      mov ecx,0
    51 0000005F 89D1                            mov ecx,edx ; salvam in ecx 
    52 00000061 B800000000                      mov eax,0 
    53 00000066 A1[08000000]                    mov eax,[x]
    54 0000006B 8B15[0C000000]                  mov edx,[x+4]
    55 00000071 BB00000000                      mov ebx,0
    56 00000076 8A1D[12000000]                  mov bl,[w]
    57 0000007C F7F3                            div ebx
    58 0000007E 01C1                            add ecx, eax 
    59 00000080 83D200                          adc edx,0
    60                                          
    61                                          
    62                                          
    63                                          
    64                                          
    65                                          
    66                                          
    67                                          
    68                                          
    69                                          
    70                                          
    71                                          
    72                                          
    73                                          
    74                                          
    75                                          
    76                                          
    77                                      
    78                                          ; exit(0)
    79 00000083 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    80 00000085 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
    81                                  
    82                                          
