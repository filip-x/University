     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;(a + b - c) + (a + b + d) - (a + b)= (2+3-4)+(2+3+5)-(2+3)=1+10-5=6
    15 00000000 02                          a db 2
    16 00000001 0300                        b dw 3
    17 00000003 04000000                    c dd 4
    18 00000007 0500000000000000            d dq 5
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 B800000000                      mov eax,0
    24 00000005 A0[00000000]                    mov al,[a]
    25 0000000A 6698                            cbw
    26 0000000C 660305[01000000]                add ax,[b]
    27 00000013 6699                            cwd
    28 00000015 2B05[03000000]                  sub eax,[c]
    29 0000001B 89C1                            mov ecx,eax
    30 0000001D B800000000                      mov eax,0
    31 00000022 A0[00000000]                    mov al,[a]
    32 00000027 6698                            cbw
    33 00000029 660305[01000000]                add ax,[b]
    34 00000030 98                              cwde
    35 00000031 99                              cdq
    36 00000032 0305[07000000]                  add eax,[d]
    37 00000038 1315[0B000000]                  adc edx,[d+4]
    38 0000003E 89C3                            mov ebx,eax
    39 00000040 89C8                            mov eax,ecx
    40 00000042 89D1                            mov ecx,edx
    41 00000044 99                              cdq
    42 00000045 01D8                            add eax,ebx
    43 00000047 11CA                            adc edx,ecx
    44 00000049 89C3                            mov ebx,eax
    45 0000004B 89D1                            mov ecx,edx
    46 0000004D B800000000                      mov eax,0
    47 00000052 BA00000000                      mov edx,0
    48 00000057 A0[00000000]                    mov al,[a]
    49 0000005C 6698                            cbw
    50 0000005E 660305[01000000]                add ax,[b]
    51 00000065 98                              cwde
    52 00000066 99                              cdq
    53 00000067 29C3                            sub ebx,eax
    54 00000069 19D1                            sbb ecx,edx
    55                                          
    56                                          
    57                                          
    58                                          
    59                                          
    60                                          
    61                                          ; exit(0)
    62 0000006B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    63 0000006D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
